geom_bar(stat = "identity",
color="white")+
geom_text(aes(label = scales::percent(Freq)),
position=position_stack(vjust=0.5),color="black",size=4.5)+
coord_polar(theta = "y")+
scale_fill_brewer(palette = "Blues")+
theme_void()+
theme(legend.title = element_blank(),
plot.title = element_text(size=12, face="bold", hjust=0.5))+
xlim(0.5,2.5)+
labs(title="Estudiantes")
load(".../edumer-ola2/input/data/original/db_proc_students.RData")
load(".../Github/edumer-ola2/input/data/original/db_proc_students.RData")
load("~/GitHub/edumer-ola2/input/data/original/db_proc_students_w02.RData")
load("C:/Users/LENOVO/Documents/GitHub/edumer-ola2/input/data/original/db_proc_students_w02.RData")
merit <- db_students_w02 %>% select(p2_1, p2_2, p2_3, p3, p4, p5, p6, p7, p8_1, p8_2)
frq(db_students_w02$p12_o2)
View(db_students_w02)
merit <- db_students_w02 %>% select(p2_1_o2, p2_2_o2, p2_3_o2, p3_o2, p4_o2, p5_o2, p6_o2, p7_o2, p8_1_o2, p8_2_o2)
pref2 <- merit %>%
group_by(p3_o2) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(pct = count / sum(count) * 100)
View(pref2)
View(db_students_w02)
des <- db_students_wo2 %>% select(p9_1_o2, p9_2_o2, p9_3_o2, p9_4_o2, p9_4_o2, p9_5_o2, p9_5_o2 )
des <- db_students_w02 %>% select(p9_1_o2, p9_2_o2, p9_3_o2, p9_4_o2, p9_4_o2, p9_5_o2, p9_5_o2 )
View(dfSummary(des))
print(summarytools::dfSummary(des), method="render")
des1 <- db_students %>% select(p9_1, p9_2, p9_3, p9_4, p9_5, p9_6 )
# Añadir el título y la leyenda al gráfico combinado
final_plot <- cowplot::plot_grid(
cowplot::plot_grid(NULL, annotate_figure(
combined_plot,
top = text_grob(
"Figura 1.54: Contraste entre la nota obtenida y la nota preferida\npor el estudiante",
size = 12,
face = "italic",
color = "black",
hjust = 0.5
),
bottom = NULL
), NULL, ncol = 1, rel_heights = c(0.1, 1, 0.1)),
legend, ncol = 1, rel_heights = c(1, 0.1)
)
final_plot
# Leyenda personalizada
legend_plot <- ggplot(data.frame(x = c("Promedio obtenido", "Promedio que cree merecer"),
y = c(1, 1))) +
geom_point(aes(x = x, y = y, color = x), size = 5) +
scale_color_manual(values = c("#9ecae1", "#3182bd")) +
guides(color = guide_legend(title = NULL)) +
theme_void() +
theme(legend.position = "bottom")
legend <- cowplot::get_legend(legend_plot)
# Combinar los gráficos y la leyenda
combined_plot <- cowplot::plot_grid(menos_nota, mas_nota, nrow = 1, labels = NULL)
# Añadir el título y la leyenda al gráfico combinado
final_plot <- cowplot::plot_grid(
cowplot::plot_grid(NULL, annotate_figure(
combined_plot,
top = text_grob(
"Figura 1.54: Contraste entre la nota obtenida y la nota preferida\npor el estudiante",
size = 12,
face = "italic",
color = "black",
hjust = 0.5
),
bottom = NULL
), NULL, ncol = 1, rel_heights = c(0.1, 1, 0.1)),
legend, ncol = 1, rel_heights = c(1, 0.1)
)
final_plot
frq(db_students$p8_1)
frq(db_students$p8_2)
frq(merit$p4_o2)
frq(merit$p7_o2)
frq(merit$p6_o2)
merit1 <- db_students %>% select(p2_1, p2_2, p2_3, p3, p4, p5, p6, p7, p8_1, p8_2)
dm1 = round(prop.table(table(categorias=merit1$p9_6)),2)
dm1 = as.data.frame(dm1)
W01<- load("input/data/original/db_proc_students.Rdta")
pacman::p_load(dplyr, sjPlot, stargazer, kableExtra, texreg, haven, sjlabelled,
ggplot2, summarytools, ggtext, ggpubr, hrbrthemes, tidyr, stringr)
W01<- load("input/data/original/db_proc_students.Rdta")
W01<- load("input/data/original/db_proc_students.Rdta")
W02<- load("input/data/original/db_proc_students_w02.Rdta")
load("input/data/original/db_proc_students.Rdta")
load("../input/data/original/db_proc_students.Rdta")
load("../input/data/original/db_proc_students.Rdta")
load("~/GitHub/reporte-colegios/input/data/original/db_proc_students.RData")
load("input/data/original/db_proc_students.RData")
load("input/data/original/db_proc_students.RData")
load("input/data/original/db_proc_students_w02.Rdta")
load("input/data/original/db_proc_students_w02.Rdta")
load("input/data/original/db_proc_students_w02.RDta")
load("input/data/original/db_proc_students_w02.RData")
W01<-db_students
W02<-db_students_w02
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p1_1_o2"]]
proc_datos <- W01 %>% set_na(., na = c(99, 88))
proc_datosW02 <- W02 %>% set_na(., na = c(99, 88))
for (i in names(dplyr::select(proc_datos, tidyselect::starts_with("p1_"), starts_with("p2_"), starts_with("p8_"), starts_with("p9_"), starts_with("p17_")))) {
proc_datos[[i]] <- sjlabelled::set_labels(
x = proc_datos[[i]],
labels = c("Muy en desacuerdo", "Desacuerdo", "De acuerdo", "Muy de acuerdo")
)
}
for (i in names(dplyr::select(proc_datos, tidyselect::starts_with("p1_"), starts_with("p2_"), starts_with("p8_"), starts_with("p9_"), starts_with("p17_")))) {
proc_datosW02[[i]] <- sjlabelled::set_labels(
x = proc_datosW02[[i]],
labels = c("Muy en desacuerdo", "Desacuerdo", "De acuerdo", "Muy de acuerdo")
)
}
# Crear la función
graficar_dona <- function(data, columna, titulo = "Estudiantes") {
# Calcular la tabla de frecuencias y convertir a dataframe
tabla_frecuencia <- round(prop.table(table(categorias = data[[columna]])), 2)
tabla_frecuencia <- as.data.frame(tabla_frecuencia)
# Renombrar las categorías
tabla_frecuencia$categorias <- factor(
tabla_frecuencia$categorias,
levels = c(1, 2, 3, 4),
labels = c("Muy en desacuerdo", "Desacuerdo", "De acuerdo", "Muy de acuerdo")
)
# Crear el gráfico de dona
plot <- ggplot(tabla_frecuencia, aes(x = 2, y = -Freq, fill = categorias)) +
geom_bar(stat = "identity", color = "white") +
geom_text(aes(label = scales::percent(Freq)),
position = position_stack(vjust = 0.5), color = "black", size = 4.5) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = "Blues") +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(size = 12, face = "bold", hjust = 0.5)) +
xlim(0.5, 2.5) +
labs(title = titulo)
return(plot)
}
plots_list_w02 <- list()
columnas2 <- paste0("p1_", 1:10, "_o2")
# Iterar sobre las columnas y generar los gráficos
for (col in columnas2) {
plot <- graficar_dona(proc_datosW02, col, "Estudiantes")
plots_list_w02[[col]] <- plot  # Guardar el gráfico en la lista usando el nombre de la columna
}
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p1_1_o2"]]
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p1_2_o2"]]
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p1_3_o2"]]
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p1_4_o2"]]
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p1_5_o2"]]
plots_list_w02 <- list()
columnas2 <- paste0("p11_", 1:10, "_o2")
# Iterar sobre las columnas y generar los gráficos
for (col in columnas2) {
plot <- graficar_dona(proc_datosW02, col, "Estudiantes")
plots_list_w02[[col]] <- plot  # Guardar el gráfico en la lista usando el nombre de la columna
}
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p11_1_o2"]]
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p11_2_o2"]]
plots_list_w02 <- list()
columnas2 <- paste0("p12_", 1:10, "_o2")
# Iterar sobre las columnas y generar los gráficos
for (col in columnas2) {
plot <- graficar_dona(proc_datosW02, col, "Estudiantes")
plots_list_w02[[col]] <- plot  # Guardar el gráfico en la lista usando el nombre de la columna
}
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p12_o2"]]
columnas2 <- paste0("p12_", 0:10, "_o2")
# Mostrar el gráfico de ejemplo, por ejemplo para "p1_1"
plots_list_w02[["p12_o2"]]
plot2 <- graficar_dona(proc_datos, "p12_o2", "Estudiantes")
plot2
pacman::p_load(dplyr, sjPlot, stargazer, kableExtra, texreg, haven, sjlabelled,
ggplot2, summarytools, ggtext, ggpubr, hrbrthemes, tidyr, stringr,
sjmisc, ggalluvial, shadowtext)
load("input/data/original/edumer_students_long.RData")
load("input/data/original/edumer_students_long.RData")
pacman::p_load(dplyr, sjPlot, stargazer, kableExtra, texreg, haven, sjlabelled,
ggplot2, summarytools, ggtext, ggpubr, hrbrthemes, tidyr, stringr,
sjmisc, ggalluvial, shadowtext)
load("input/data/original/edumer_students_long.RData")
# codificamos los valores 99-88 como missing para todas las variables-----------
db_long <- edumer_students_long %>% set_na(., na = c(99, 88))
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p1_"),
starts_with("p2_"), starts_with("p8_"), starts_with("p9_"),
starts_with("p17_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Muy en db_longacuerdo", "db_longacuerdo", "De acuerdo", "Muy de acuerdo")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p10_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nada importante", "Algo importante", "Importante",
"Muy importante")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p11_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Seguro no haré esto", "Tal vez haré esto",
"Probablemente haré esto", "Seguro haré esto")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p12_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Si", "No")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p13_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nunca", "Una vez al año", "Una vez al mes", "Semanalmente",
"Todos los días")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p18_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nunca", "Casi nunca", "Casi siempre", "Siempre")
)
}
install.packages("ggshadowtext")
library(dplyr)
library(ggplot2)
library(ggalluvial)
library(ggshadowtext)
# Definición de la función
crear_grafico_alluvial <- function(data, variable, etiquetas, colores, titulo, fuente) {
# Definición de la función
crear_grafico_alluvial <- function(data, variable, etiquetas, colores, titulo, fuente) {
etiquetas <- c("Muy en desacuerdo", "En desacuerdo", "De acuerdo", "Muy de acuerdo")
colores <- c("#f1eef6ff", "#bdc9e1ff", "#74a9cfff", "#0570b0ff")
titulo <- "Figura: En esta escuela quienes se esfuerzan\nobtienen buenas notas"
grafico <- crear_grafico_alluvial(
data = db_long,         # Tu base de datos
variable = "p1_2",      # La variable de interés
etiquetas = etiquetas,  # Etiquetas de los niveles
colores = colores,      # Colores personalizados
titulo = titulo,        # Título del gráfico
fuente = fuente         # Pie de página
)
grafico
etiquetas.pe[[variable]] <- factor}
etiquetas <- c("Muy en desacuerdo", "En desacuerdo", "De acuerdo", "Muy de acuerdo")
colores <- c("#f1eef6ff", "#bdc9e1ff", "#74a9cfff", "#0570b0ff")
titulo <- "Figura: En esta escuela quienes se esfuerzan\nobtienen buenas notas"
fuente <- "Fuente: EDUMER"
grafico <- crear_grafico_alluvial(
data = db_long,         # Tu base de datos
variable = "p1_2",      # La variable de interés
etiquetas = etiquetas,  # Etiquetas de los niveles
colores = colores,      # Colores personalizados
titulo = titulo,        # Título del gráfico
fuente = fuente         # Pie de página
)
grafico
print(grafico)
# Paso 1: Preparar datos--------------------------------------------------------
db_long <- db_long %>% filter(!is.na(p1_2) & !is.na(ola))
pacman::p_load(dplyr, sjPlot, stargazer, kableExtra, texreg, haven, sjlabelled,
ggplot2, summarytools, ggtext, ggpubr, hrbrthemes, tidyr, stringr,
sjmisc, ggalluvial, shadowtext)
#Data
load("input/data/original/edumer_students_long.RData")
# codificamos los valores 99-88 como missing para todas las variables-----------
db_long <- edumer_students_long %>% set_na(., na = c(99, 88))
# Paso 1: Preparar datos--------------------------------------------------------
db_long <- db_long %>% filter(!is.na(p1_1) & !is.na(ola))
db_long$p1_1 <- factor(db_long$p1_1, labels= c("Muy en desacuerdo", "En desacuerdo",
"De acuerdo", "Muy de acuerdo"))
# Paso 2: Calcular frecuencias-------------------------------------------------
pe <- db_long %>%
group_by(id_estudiante, ola) %>%
count(p1_1) %>%
group_by(ola) %>%
mutate(porcentaje=n/sum(n)) %>%
ungroup() %>%
na.omit()
# Paso 3: Agregar etiquetas
etiquetas.pe <- db_long %>%
group_by(ola, p1_1) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(ola) %>%
mutate(porcentaje = count / sum(count)) %>%
na.omit() %>%
mutate(id_estudiante = 1)
# Paso 4: Ordenar los factores de la misma forma
pe$p1_1 <- factor(pe$p1_1)
etiquetas.pe$p1_1 <- factor(etiquetas.pe$p1_1)
# Paso 5: Definir colores de las barras
colors <- c("#f1eef6ff","#bdc9e1ff","#74a9cfff","#0570b0ff")
# Paso 6: Graficar
plot_pe <- pe %>%
ggplot(aes(x = ola, fill = p1_1, stratum = p1_1,
alluvium = id_estudiante, y = porcentaje)) +
ggalluvial::geom_flow(alpha = .66) +
ggalluvial::geom_stratum(linetype = 0) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = colors) +
geom_shadowtext(data = etiquetas.pe,
aes(label = ifelse(porcentaje > 0, scales::percent(porcentaje, accuracy = .1), "")),
position = position_stack(vjust = .5),
show.legend = FALSE,
size = 4,
color = 'white',
bg.colour = 'grey30') +
labs(y = "Porcentaje",
x = c("Olas"),
fill = "Grado de acuerdo",
caption = "Fuente: EDUMER",
title = "Figura 1: En esta escuela quienes se esfuerzan\nobtienen buenas notas") +
theme(legend.position = "bottom") +
theme_blank()
plot_pe
# Paso 1: Preparar datos--------------------------------------------------------
db_long <- db_long %>% filter(!is.na(p1_2) & !is.na(ola))
db_long$p1_2 <- factor(db_long$p1_2, labels= c("Muy en desacuerdo", "En desacuerdo",
"De acuerdo", "Muy de acuerdo"))
# Paso 2: Calcular frecuencias-------------------------------------------------
pe <- db_long %>%
group_by(id_estudiante, ola) %>%
count(p1_2) %>%
group_by(ola) %>%
mutate(porcentaje=n/sum(n)) %>%
ungroup() %>%
na.omit()
# Paso 3: Agregar etiquetas
etiquetas.pe <- db_long %>%
group_by(ola, p1_2) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(ola) %>%
mutate(porcentaje = count / sum(count)) %>%
na.omit() %>%
mutate(id_estudiante = 1)
# Paso 4: Ordenar los factores de la misma forma
pe$p1_2 <- factor(pe$p1_2)
etiquetas.pe$p1_2 <- factor(etiquetas.pe$p1_2)
# Paso 5: Definir colores de las barras
colors <- c("#f1eef6ff","#bdc9e1ff","#74a9cfff","#0570b0ff")
# Paso 6: Graficar
plot_pe <- pe %>%
ggplot(aes(x = ola, fill = p1_2, stratum = p1_2,
alluvium = id_estudiante, y = porcentaje)) +
ggalluvial::geom_flow(alpha = .66) +
ggalluvial::geom_stratum(linetype = 0) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = colors) +
geom_shadowtext(data = etiquetas.pe,
aes(label = ifelse(porcentaje > 0, scales::percent(porcentaje, accuracy = .1), "")),
position = position_stack(vjust = .5),
show.legend = FALSE,
size = 4,
color = 'white',
bg.colour = 'grey30') +
labs(y = "Porcentaje",
x = c("Olas"),
fill = "Grado de acuerdo",
caption = "Fuente: EDUMER",
title = "Figura 2: En Chile, las personas son recompensadas por su \n inteligencia y habilidad") +
theme(legend.position = "bottom") +
theme_blank()
plot_pe
pacman::p_load(dplyr, sjPlot, stargazer, kableExtra, texreg, haven, sjlabelled,
ggplot2, summarytools, ggtext, ggpubr, hrbrthemes, tidyr, stringr,
sjmisc, ggalluvial, shadowtext)
#Data
load("input/data/original/edumer_students_long.RData")
load("input/data/original/edumer_students_w02.RData")
pacman::p_load(dplyr, sjPlot, stargazer, kableExtra, texreg, haven, sjlabelled,
ggplot2, summarytools, ggtext, ggpubr, hrbrthemes, tidyr, stringr,
sjmisc, ggalluvial, shadowtext)
#Data
load("input/data/original/edumer_students_long.RData")
load("input/data/original/db_proc_students_w02.RData")
# Codificamos los valores 99-88 como missing para todas las variables
db_long <- edumer_students_long %>% set_na(., na = c(99, 88))
# Iteramos la recodificación de etiquetas para cada variable y fraseo
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p1_"), starts_with("p2_"), starts_with("p8_"), starts_with("p9_"), starts_with("p17_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Muy en desacuerdo", "En desacuerdo", "De acuerdo", "Muy de acuerdo")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p10_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nada importante", "Algo importante", "Importante", "Muy importante")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p11_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Seguro no haré esto", "Tal vez haré esto", "Probablemente haré esto", "Seguro haré esto")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p12_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Si", "No")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p13_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nunca", "Una vez al año", "Una vez al mes", "Semanalmente", "Todos los días")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p18_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nunca", "Casi nunca", "Casi siempre", "Siempre")
)
}
## Meritocracia
### Percepción Esfuerzo
```{r, gráfico 1, echo=FALSE}
# Codificamos los valores 99-88 como missing para todas las variables
db_long <- edumer_students_long %>% set_na(., na = c(99, 88))
# Iteramos la recodificación de etiquetas para cada variable y fraseo
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p1_"), starts_with("p2_"), starts_with("p8_"), starts_with("p9_"), starts_with("p17_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Muy en desacuerdo", "En desacuerdo", "De acuerdo", "Muy de acuerdo")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p10_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nada importante", "Algo importante", "Importante", "Muy importante")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p11_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Seguro no haré esto", "Tal vez haré esto", "Probablemente haré esto", "Seguro haré esto")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p12_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Si", "No")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p13_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nunca", "Una vez al año", "Una vez al mes", "Semanalmente", "Todos los días")
)
}
for (i in names(dplyr::select(db_long, tidyselect::starts_with("p18_")))) {
db_long[[i]] <- sjlabelled::set_labels(
x = db_long[[i]],
labels = c("Nunca", "Casi nunca", "Casi siempre", "Siempre")
)
}
# gráfico: esfuerzo y curso
# dona curso: Básica
basica_esfuerzo <- db_students_w02 %>% dplyr::filter(nivel_estudiante_o2=="Básica") %>%
dplyr::select(p2_1_o2) #se filtran valores para esa categoría del curso
basica_esfuerzo = round(prop.table(table(categorias=basica_esfuerzo$p2_1_o2)),2) #se crean variables 'categoria' y 'Freq' del objeto
basica_esfuerzo = as.data.frame(basica_esfuerzo) #convertimos el objeto en data.frame
basica_esfuerzo$categorias <- factor(basica_esfuerzo$categorias, levels = c(1, 2, 3, 4), labels = c("Muy en desacuerdo", "Desacuerdo", "De acuerdo", "Muy de acuerdo"))
plot_basica_esfuerzo<-ggplot(basica_esfuerzo,aes(x=2,y=-Freq, fill=categorias))+
geom_bar(stat = "identity",
color="white")+
geom_text(aes(label = scales::percent(Freq)),
position=position_stack(vjust=0.5),color="black",size=4.5)+
coord_polar(theta = "y")+
scale_fill_brewer(palette = "Blues")+
theme_void()+
theme(legend.title = element_blank(),
plot.title = element_text(size=12, face="bold", hjust=0.5))+
xlim(0.5,2.5) +
labs(title="Estudiantes de básica") #graficamos
# dona curso: Media
# categoría media
media_esfuerzo <- db_students_w02 %>% filter(nivel_estudiante_o2=="Media") %>%
dplyr::select(p2_1_o2)
media_esfuerzo = round(prop.table(table(categorias=media_esfuerzo$p2_1_o2)),2)
media_esfuerzo = as.data.frame(media_esfuerzo)
media_esfuerzo$categorias <- factor(media_esfuerzo$categorias, levels = c(1, 2, 3, 4), labels = c("Muy en desacuerdo", "Desacuerdo", "De acuerdo", "Muy de acuerdo"))
plot_media_esfuerzo<-ggplot(media_esfuerzo,aes(x=2,y=-Freq, fill=categorias))+
geom_bar(stat = "identity",
color="white")+
geom_text(aes(label = scales::percent(Freq)),
position=position_stack(vjust=0.5),color="black",size=4.5)+
coord_polar(theta = "y")+
scale_fill_brewer(palette = "Blues")+
theme_void()+
theme(legend.title = element_blank(),
plot.title = element_text(size=12, face="bold", hjust=0.5))+
xlim(0.5,2.5) +
labs(title="Estudiantes de media")
esfuerzo_curso <- ggarrange(
plot_basica_esfuerzo,
plot_media_esfuerzo,
common.legend = TRUE,
ncol = 2,
legend = "bottom")
